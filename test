import java.security.SecureRandom;
import java.util.Base64;

public class BalancedEncoder {
    public static void main(String[] args) {
        int length = 15;
        String allowedCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_#$";
        int numberOfCharacters = allowedCharacters.length();
        int lettersCount = length / 3;
        int digitsCount = length / 3;
        int specialCharsCount = length / 3;

        SecureRandom random = new SecureRandom();
        StringBuilder balancedString = new Currently, the update draft and rerequest process allows only requesters or delegates to update requests. A recent issue uncovered unauthorized updates. To prevent this, we need to implement an API check that ensures authorized users with "edit" action can only modify the corresponding request identified by its unique MNE.

            balancedString.append(allowedCharacters.charAt(randomIndex));
        }

        for (int i = 0; i < digitsCount; i++) {
            int randomIndex = random.nextInt(10) + 52; // Index for digits in the allowedCharacters string
            balancedString.append(allowedCharacters.charAt(randomIndex));
        }

        for (int i = 0; i < specialCharsCount; i++) {
            int randomIndex = random.nextInt(4) + 62; // Index for special characters in the allowedCharacters string
            balancedString.append(allowedCharacters.charAt(randomIndex));
        }

        byte[] encodedBytes = Base64.getEncoder().encode(balancedString.toString().getBytes());
        String encodedString = new String(encodedBytes);

        System.out.println("Balanced encoded string: " + encodedString);
    }
}
